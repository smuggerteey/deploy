name: CI/CD Pipeline

on:
  push:
    branches:
      - master 

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9' 

      - name: Install dependencies
        run: |
          cd porfolio
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Ensure requirements.txt is in the 'porfolio' directory

      - name: Build Docker image
        run: |
          cd porfolio
          docker build -t ${{ secrets.DOCKER_USERNAME }}/art:latest .  # Ensure the 'art' tag is correct

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker --version  # Debugging: Check Docker version
          docker images  # Debugging: List Docker images to verify build

      - name: Push Docker image
        run: |
          cd porfolio
          docker push ${{ secrets.DOCKER_USERNAME }}/art:latest

      - name: Deploy to GCP
        env:
          GCP_VM_IP: ${{ secrets.VM_HOST }}
          GCP_SSH_PRIVATE_KEY: ${{ secrets.GCP_VM_KEY }}
        run: |
          # Create the SSH directory
          mkdir -p ~/.ssh

          # Write the SSH private key to the file
          echo "${GCP_SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Debugging SSH key issues
          echo "Listing SSH directory"
          ls -l ~/.ssh
          cat ~/.ssh/id_rsa  # Ensure the private key is correctly set

          # Add the VM to known hosts to prevent SSH from prompting
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts
          echo "SSH known hosts:"
          cat ~/.ssh/known_hosts

          # SSH into the GCP VM and execute the deployment commands
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa smuggerteey@${GCP_VM_IP} << EOF
            # Debugging
            echo "Checking Docker version on the VM"
            docker --version

            # Ensure Docker is installed
            if ! command -v docker &> /dev/null
            then
                echo "Docker not found, installing..."
                sudo apt-get update
                sudo apt-get install -y docker.io
            else
                echo "Docker is installed"
            fi

            # Add user to the docker group if not already added
            sudo usermod -aG docker smuggerteey

            # Restart shell to recognize group change (might require a re-login, so next time this would be automatic)
            newgrp docker

            # Pull the latest Docker image
            docker pull ${{ secrets.DOCKER_USERNAME }}/art:latest  # Changed to 'art'

            # Stop and remove the old container if it exists
            docker stop art || true  # Changed to 'art'
            docker rm art || true  # Changed to 'art'

            # Run the Docker container
            docker run -d -p 5000:5000 --name art ${{ secrets.DOCKER_USERNAME }}/art:latest  # Changed to 'art'
          EOF
